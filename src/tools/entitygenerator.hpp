#ifndef PARALLEL_ENTITYGENERATOR_HPP
#define PARALLEL_ENTITYGENERATOR_HPP

#include <random>
#include <functional>
#include "../environment/entity.hpp"
#include "../environment/virtualenvironment.hpp"

class EntityGenerator {
    std::uniform_real_distribution<double> pos_distribution;
    std::uniform_real_distribution<double> size_distribution;
    std::default_random_engine random_engine;

public:
    /**
     * Constructs an EntityGenerator object given the virtual environment
     * size. The seed for the random engine will be generated by std::random_device.
     *
     * @param ve_size the size of the virtual environment.
     */
    EntityGenerator(int ve_size) : EntityGenerator(ve_size, std::random_device()()) {};

    /**
     * Constructs an EntityGenerator object given the virtual environment
     * size and the seed for the random engine.
     *
     * @param ve_size The size of the virtual environment.
     * @param seed The random seed for the random engine.
     */
    EntityGenerator(int ve_size, std::random_device::result_type seed);

    /**
     * Sets the range of possible sizes for shapes generated in the virtual
     * environment.
     *
     * @param min_size The minimum size an Entity should have.
     * @param max_size The maximum size an Entity should have.
     */
    void SetEntitySizeRange(int min_size, int max_size);

    /**
     * Sets the virtual environment size for the uniform distribution of size.
     * This will affect new possible values of random positions in the virtual
     * environment.
     *
     * @param ve_size The size of the virtual environment.
     */
    void SetVirtualEnvironmentSize(int ve_size);

    /**
     * Generates an entity representing a cube. The cube's center is within
     * ve_size however its points may extend beyond ve_size if one of the values
     * in the point is near ve_size.
     *
     * @return a random cube entity.
     */
    Entity GenerateCube();

    /**
     * Generates a random Vector3 where each value is a random double between
     * -ve_size and ve_size.
     *
     * @return a random Vector3
     */
    Vector3 RandomVector();
};


#endif //PARALLEL_ENTITYGENERATOR_HPP
